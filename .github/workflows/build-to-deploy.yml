# This called workflow builds a docker container, targeting the "app" stage and pushes the image to Docker Hub.

name: Build and deploy image

on:
  workflow_call:
    secrets:
      docker_username:
        required: true
      docker_access_token:
        required: true
      quay_username:
        required: false
      quay_robot_token:
        required: false
    inputs:
      path_to_context:
        required: true
        type: string
      dockerfile_name:
        default: Dockerfile
        required: false
        type: string
      repository_name:
        default: staphb
        required: false
        type: string
      cache:
        required: true
        type: string
      container_name:
        required: true
        type: string
      tag:
        required: false
        default: latest
        type: string
      push_quay:
        default: true
        required: false
        type: boolean
      push_latest_tag:
        default: true
        required: false
        type: boolean


jobs:

  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Check Out Repo (+ download Git LFS dependencies)  # each job runs in an isolated environment, so need to check out the repo in each job
        uses: actions/checkout@v4
        with:
          lfs: true

      # Git LFS not used by StaPH-B but maybe useful in some people's forks
      - name: Checkout LFS objects
        run: git lfs checkout

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers  # also need to set up the cache in each job, using the same prefix (here ${{ runner.os }}-buildx) makes it sharable between jobs
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-${{ inputs.cache }}
          key: ${{ runner.os }}-buildx-${{ inputs.cache }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ inputs.cache }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5 # trying this to resolve issues with pushing identical images to quay. info here: https://github.com/docker/build-push-action/issues/452
        with:
          images: |
            ${{ inputs.repository_name }}/${{ inputs.container_name }}:${{ inputs.tag }}
            ${{ inputs.repository_name }}/${{ inputs.container_name }}:latest
            quay.io/${{ inputs.repository_name }}/${{ inputs.container_name }}:${{ inputs.tag }}
            quay.io/${{ inputs.repository_name }}/${{ inputs.container_name }}:latest

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.docker_username }}
          password: ${{ secrets.docker_access_token }}

      - name: Login to Quay
        uses: docker/login-action@v3
        if: ${{ inputs.push_quay }}
        with:
          registry: quay.io
          username: ${{ secrets.quay_username }}
          password: ${{ secrets.quay_robot_token }}

      - name: Build and push user-defined tag to DockerHub
        id: docker_build_user_defined_tag
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.path_to_context }}
          file: ${{ inputs.path_to_context }}/${{ inputs.dockerfile_name }}
          target: app
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache-${{ inputs.cache }}
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-${{ inputs.cache }}-new # mode=max means export layers from all stage to cache
          tags: | # pushing to dockerhub for only the user-defined inputs.tag
            ${{ inputs.repository_name }}/${{ inputs.container_name }}:${{ inputs.tag }}

      - name: Build and push latest tag to DockerHub
        id: docker_build_latest_tag
        uses: docker/build-push-action@v5
        if: ${{ inputs.push_latest_tag }}
        with:
          context: ${{ inputs.path_to_context }}
          file: ${{ inputs.path_to_context }}/${{ inputs.dockerfile_name }}
          target: app
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache-${{ inputs.cache }}
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-${{ inputs.cache }}-new # mode=max means export layers from all stage to cache
          tags: | # pushing to dockerhub for only latest tag
            ${{ inputs.repository_name }}/${{ inputs.container_name }}:latest

      - name: Build and push user-defined tag to Quay
        id: quay_build_user_defined_tag
        uses: docker/build-push-action@v5
        if: ${{ inputs.push_quay }}
        with:
          context: ${{ inputs.path_to_context }}
          file: ${{ inputs.path_to_context }}/${{ inputs.dockerfile_name }}
          target: app
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache-${{ inputs.cache }}
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-${{ inputs.cache }}-new # mode=max means export layers from all stage to cache
          tags: | # pushing to quay for only user-defined inputs.tag
            quay.io/${{ inputs.repository_name }}/${{ inputs.container_name }}:${{ inputs.tag }}

      - name: Build and push latest tag to Quay
        id: quay_build_latest_tag
        uses: docker/build-push-action@v5
        if: ${{ inputs.push_quay && inputs.push_latest_tag }}
        with:
          context: ${{ inputs.path_to_context }}
          file: ${{ inputs.path_to_context }}/${{ inputs.dockerfile_name }}
          target: app
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache-${{ inputs.cache }}
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-${{ inputs.cache }}-new # mode=max means export layers from all stage to cache
          tags: | # pushing to quay for only latest
            quay.io/${{ inputs.repository_name }}/${{ inputs.container_name }}:latest     

      - name: Move cache # apparently prevents the cache from growing in size forever
        run: |
          rm -rf /tmp/.buildx-cache-${{ inputs.cache }}
          mv /tmp/.buildx-cache-${{ inputs.cache }}-new /tmp/.buildx-cache-${{ inputs.cache }}

      - name: Image digest
        run: echo ${{ steps.docker_build_user_defined_tag.outputs.digest }}
